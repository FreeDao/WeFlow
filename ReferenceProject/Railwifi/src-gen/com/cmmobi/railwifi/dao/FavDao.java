package com.cmmobi.railwifi.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import com.cmmobi.railwifi.dao.Fav;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table FAV.
*/
public class FavDao extends AbstractDao<Fav, String> {

    public static final String TABLENAME = "FAV";

    /**
     * Properties of entity Fav.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Media_id = new Property(0, String.class, "media_id", true, "MEDIA_ID");
        public final static Property Media_type = new Property(1, int.class, "media_type", false, "MEDIA_TYPE");
        public final static Property Name = new Property(2, String.class, "name", false, "NAME");
        public final static Property Img_path = new Property(3, String.class, "img_path", false, "IMG_PATH");
        public final static Property Tag = new Property(4, String.class, "tag", false, "TAG");
        public final static Property Color = new Property(5, String.class, "color", false, "COLOR");
        public final static Property Introduction = new Property(6, String.class, "introduction", false, "INTRODUCTION");
        public final static Property Source = new Property(7, String.class, "source", false, "SOURCE");
        public final static Property Source_id = new Property(8, String.class, "source_id", false, "SOURCE_ID");
        public final static Property Src_path = new Property(9, String.class, "src_path", false, "SRC_PATH");
        public final static Property Director = new Property(10, String.class, "director", false, "DIRECTOR");
        public final static Property Actors = new Property(11, String.class, "actors", false, "ACTORS");
        public final static Property Score = new Property(12, String.class, "score", false, "SCORE");
    };


    public FavDao(DaoConfig config) {
        super(config);
    }
    
    public FavDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'FAV' (" + //
                "'MEDIA_ID' TEXT PRIMARY KEY NOT NULL ," + // 0: media_id
                "'MEDIA_TYPE' INTEGER NOT NULL ," + // 1: media_type
                "'NAME' TEXT," + // 2: name
                "'IMG_PATH' TEXT," + // 3: img_path
                "'TAG' TEXT," + // 4: tag
                "'COLOR' TEXT," + // 5: color
                "'INTRODUCTION' TEXT," + // 6: introduction
                "'SOURCE' TEXT," + // 7: source
                "'SOURCE_ID' TEXT," + // 8: source_id
                "'SRC_PATH' TEXT," + // 9: src_path
                "'DIRECTOR' TEXT," + // 10: director
                "'ACTORS' TEXT," + // 11: actors
                "'SCORE' TEXT);"); // 12: score
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'FAV'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, Fav entity) {
        stmt.clearBindings();
 
        String media_id = entity.getMedia_id();
        if (media_id != null) {
            stmt.bindString(1, media_id);
        }
        stmt.bindLong(2, entity.getMedia_type());
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(3, name);
        }
 
        String img_path = entity.getImg_path();
        if (img_path != null) {
            stmt.bindString(4, img_path);
        }
 
        String tag = entity.getTag();
        if (tag != null) {
            stmt.bindString(5, tag);
        }
 
        String color = entity.getColor();
        if (color != null) {
            stmt.bindString(6, color);
        }
 
        String introduction = entity.getIntroduction();
        if (introduction != null) {
            stmt.bindString(7, introduction);
        }
 
        String source = entity.getSource();
        if (source != null) {
            stmt.bindString(8, source);
        }
 
        String source_id = entity.getSource_id();
        if (source_id != null) {
            stmt.bindString(9, source_id);
        }
 
        String src_path = entity.getSrc_path();
        if (src_path != null) {
            stmt.bindString(10, src_path);
        }
 
        String director = entity.getDirector();
        if (director != null) {
            stmt.bindString(11, director);
        }
 
        String actors = entity.getActors();
        if (actors != null) {
            stmt.bindString(12, actors);
        }
 
        String score = entity.getScore();
        if (score != null) {
            stmt.bindString(13, score);
        }
    }

    /** @inheritdoc */
    @Override
    public String readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public Fav readEntity(Cursor cursor, int offset) {
        Fav entity = new Fav( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // media_id
            cursor.getInt(offset + 1), // media_type
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // name
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // img_path
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // tag
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // color
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // introduction
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // source
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // source_id
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // src_path
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // director
            cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11), // actors
            cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12) // score
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, Fav entity, int offset) {
        entity.setMedia_id(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setMedia_type(cursor.getInt(offset + 1));
        entity.setName(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setImg_path(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setTag(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setColor(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setIntroduction(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setSource(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setSource_id(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setSrc_path(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setDirector(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setActors(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
        entity.setScore(cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12));
     }
    
    /** @inheritdoc */
    @Override
    protected String updateKeyAfterInsert(Fav entity, long rowId) {
        return entity.getMedia_id();
    }
    
    /** @inheritdoc */
    @Override
    public String getKey(Fav entity) {
        if(entity != null) {
            return entity.getMedia_id();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
