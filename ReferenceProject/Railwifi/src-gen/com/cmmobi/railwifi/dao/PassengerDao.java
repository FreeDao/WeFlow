package com.cmmobi.railwifi.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import com.cmmobi.railwifi.dao.Passenger;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table PASSENGER.
*/
public class PassengerDao extends AbstractDao<Passenger, Long> {

    public static final String TABLENAME = "PASSENGER";

    /**
     * Properties of entity Passenger.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property User_id = new Property(1, String.class, "user_id", false, "USER_ID");
        public final static Property Uuid = new Property(2, String.class, "uuid", false, "UUID");
        public final static Property Nick_name = new Property(3, String.class, "nick_name", false, "NICK_NAME");
        public final static Property Telephone = new Property(4, String.class, "telephone", false, "TELEPHONE");
        public final static Property Birther = new Property(5, String.class, "birther", false, "BIRTHER");
        public final static Property Sex = new Property(6, String.class, "sex", false, "SEX");
        public final static Property Head_path = new Property(7, String.class, "head_path", false, "HEAD_PATH");
    };


    public PassengerDao(DaoConfig config) {
        super(config);
    }
    
    public PassengerDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'PASSENGER' (" + //
                "'_id' INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "'USER_ID' TEXT," + // 1: user_id
                "'UUID' TEXT NOT NULL ," + // 2: uuid
                "'NICK_NAME' TEXT," + // 3: nick_name
                "'TELEPHONE' TEXT," + // 4: telephone
                "'BIRTHER' TEXT," + // 5: birther
                "'SEX' TEXT," + // 6: sex
                "'HEAD_PATH' TEXT);"); // 7: head_path
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'PASSENGER'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, Passenger entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String user_id = entity.getUser_id();
        if (user_id != null) {
            stmt.bindString(2, user_id);
        }
        stmt.bindString(3, entity.getUuid());
 
        String nick_name = entity.getNick_name();
        if (nick_name != null) {
            stmt.bindString(4, nick_name);
        }
 
        String telephone = entity.getTelephone();
        if (telephone != null) {
            stmt.bindString(5, telephone);
        }
 
        String birther = entity.getBirther();
        if (birther != null) {
            stmt.bindString(6, birther);
        }
 
        String sex = entity.getSex();
        if (sex != null) {
            stmt.bindString(7, sex);
        }
 
        String head_path = entity.getHead_path();
        if (head_path != null) {
            stmt.bindString(8, head_path);
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public Passenger readEntity(Cursor cursor, int offset) {
        Passenger entity = new Passenger( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // user_id
            cursor.getString(offset + 2), // uuid
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // nick_name
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // telephone
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // birther
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // sex
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7) // head_path
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, Passenger entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setUser_id(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setUuid(cursor.getString(offset + 2));
        entity.setNick_name(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setTelephone(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setBirther(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setSex(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setHead_path(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(Passenger entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(Passenger entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
