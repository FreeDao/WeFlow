package com.cmmobi.railwifi.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import com.cmmobi.railwifi.dao.HistoryOrderForm;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table HISTORY_ORDER_FORM.
*/
public class HistoryOrderFormDao extends AbstractDao<HistoryOrderForm, Long> {

    public static final String TABLENAME = "HISTORY_ORDER_FORM";

    /**
     * Properties of entity HistoryOrderForm.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property User_id = new Property(1, String.class, "user_id", false, "USER_ID");
        public final static Property Uuid = new Property(2, String.class, "uuid", false, "UUID");
        public final static Property Rail_num = new Property(3, String.class, "rail_num", false, "RAIL_NUM");
        public final static Property Site_num = new Property(4, String.class, "site_num", false, "SITE_NUM");
        public final static Property Nick_name = new Property(5, String.class, "nick_name", false, "NICK_NAME");
        public final static Property Telephone = new Property(6, String.class, "telephone", false, "TELEPHONE");
        public final static Property Order_time = new Property(7, String.class, "order_time", false, "ORDER_TIME");
        public final static Property Total_price = new Property(8, String.class, "total_price", false, "TOTAL_PRICE");
        public final static Property Train_num = new Property(9, String.class, "train_num", false, "TRAIN_NUM");
        public final static Property Order_code = new Property(10, String.class, "order_code", false, "ORDER_CODE");
        public final static Property Status = new Property(11, String.class, "status", false, "STATUS");
        public final static Property Content = new Property(12, String.class, "content", false, "CONTENT");
        public final static Property Eat_position = new Property(13, String.class, "eat_position", false, "EAT_POSITION");
        public final static Property Site_count = new Property(14, String.class, "site_count", false, "SITE_COUNT");
    };


    public HistoryOrderFormDao(DaoConfig config) {
        super(config);
    }
    
    public HistoryOrderFormDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'HISTORY_ORDER_FORM' (" + //
                "'_id' INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "'USER_ID' TEXT," + // 1: user_id
                "'UUID' TEXT NOT NULL ," + // 2: uuid
                "'RAIL_NUM' TEXT," + // 3: rail_num
                "'SITE_NUM' TEXT," + // 4: site_num
                "'NICK_NAME' TEXT," + // 5: nick_name
                "'TELEPHONE' TEXT," + // 6: telephone
                "'ORDER_TIME' TEXT," + // 7: order_time
                "'TOTAL_PRICE' TEXT," + // 8: total_price
                "'TRAIN_NUM' TEXT," + // 9: train_num
                "'ORDER_CODE' TEXT," + // 10: order_code
                "'STATUS' TEXT," + // 11: status
                "'CONTENT' TEXT," + // 12: content
                "'EAT_POSITION' TEXT," + // 13: eat_position
                "'SITE_COUNT' TEXT);"); // 14: site_count
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'HISTORY_ORDER_FORM'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, HistoryOrderForm entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String user_id = entity.getUser_id();
        if (user_id != null) {
            stmt.bindString(2, user_id);
        }
        stmt.bindString(3, entity.getUuid());
 
        String rail_num = entity.getRail_num();
        if (rail_num != null) {
            stmt.bindString(4, rail_num);
        }
 
        String site_num = entity.getSite_num();
        if (site_num != null) {
            stmt.bindString(5, site_num);
        }
 
        String nick_name = entity.getNick_name();
        if (nick_name != null) {
            stmt.bindString(6, nick_name);
        }
 
        String telephone = entity.getTelephone();
        if (telephone != null) {
            stmt.bindString(7, telephone);
        }
 
        String order_time = entity.getOrder_time();
        if (order_time != null) {
            stmt.bindString(8, order_time);
        }
 
        String total_price = entity.getTotal_price();
        if (total_price != null) {
            stmt.bindString(9, total_price);
        }
 
        String train_num = entity.getTrain_num();
        if (train_num != null) {
            stmt.bindString(10, train_num);
        }
 
        String order_code = entity.getOrder_code();
        if (order_code != null) {
            stmt.bindString(11, order_code);
        }
 
        String status = entity.getStatus();
        if (status != null) {
            stmt.bindString(12, status);
        }
 
        String content = entity.getContent();
        if (content != null) {
            stmt.bindString(13, content);
        }
 
        String eat_position = entity.getEat_position();
        if (eat_position != null) {
            stmt.bindString(14, eat_position);
        }
 
        String site_count = entity.getSite_count();
        if (site_count != null) {
            stmt.bindString(15, site_count);
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public HistoryOrderForm readEntity(Cursor cursor, int offset) {
        HistoryOrderForm entity = new HistoryOrderForm( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // user_id
            cursor.getString(offset + 2), // uuid
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // rail_num
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // site_num
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // nick_name
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // telephone
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // order_time
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // total_price
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // train_num
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // order_code
            cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11), // status
            cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12), // content
            cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13), // eat_position
            cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14) // site_count
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, HistoryOrderForm entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setUser_id(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setUuid(cursor.getString(offset + 2));
        entity.setRail_num(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setSite_num(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setNick_name(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setTelephone(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setOrder_time(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setTotal_price(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setTrain_num(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setOrder_code(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setStatus(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
        entity.setContent(cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12));
        entity.setEat_position(cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13));
        entity.setSite_count(cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(HistoryOrderForm entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(HistoryOrderForm entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
