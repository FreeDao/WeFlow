package com.cmmobi.railwifi.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import com.cmmobi.railwifi.dao.TravelOrderInfo;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table TRAVEL_ORDER_INFO.
*/
public class TravelOrderInfoDao extends AbstractDao<TravelOrderInfo, Long> {

    public static final String TABLENAME = "TRAVEL_ORDER_INFO";

    /**
     * Properties of entity TravelOrderInfo.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property User_id = new Property(1, String.class, "user_id", false, "USER_ID");
        public final static Property Uuid = new Property(2, String.class, "uuid", false, "UUID");
        public final static Property Tag = new Property(3, String.class, "tag", false, "TAG");
        public final static Property Color = new Property(4, String.class, "color", false, "COLOR");
        public final static Property Name = new Property(5, String.class, "name", false, "NAME");
        public final static Property Fullname = new Property(6, String.class, "fullname", false, "FULLNAME");
        public final static Property Introduction = new Property(7, String.class, "introduction", false, "INTRODUCTION");
        public final static Property Line_id = new Property(8, String.class, "line_id", false, "LINE_ID");
        public final static Property Total_price = new Property(9, String.class, "total_price", false, "TOTAL_PRICE");
        public final static Property Adult_ticket = new Property(10, String.class, "adult_ticket", false, "ADULT_TICKET");
        public final static Property Child_ticket = new Property(11, String.class, "child_ticket", false, "CHILD_TICKET");
        public final static Property Time = new Property(12, String.class, "time", false, "TIME");
        public final static Property Username = new Property(13, String.class, "username", false, "USERNAME");
        public final static Property Cellphone = new Property(14, String.class, "cellphone", false, "CELLPHONE");
        public final static Property Emailaddr = new Property(15, String.class, "emailaddr", false, "EMAILADDR");
        public final static Property Idcardfnum = new Property(16, String.class, "idcardfnum", false, "IDCARDFNUM");
        public final static Property Order_time = new Property(17, String.class, "order_time", false, "ORDER_TIME");
        public final static Property Order_num = new Property(18, String.class, "order_num", false, "ORDER_NUM");
        public final static Property Ispaid = new Property(19, String.class, "ispaid", false, "ISPAID");
        public final static Property Img = new Property(20, String.class, "img", false, "IMG");
    };


    public TravelOrderInfoDao(DaoConfig config) {
        super(config);
    }
    
    public TravelOrderInfoDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'TRAVEL_ORDER_INFO' (" + //
                "'_id' INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "'USER_ID' TEXT," + // 1: user_id
                "'UUID' TEXT NOT NULL ," + // 2: uuid
                "'TAG' TEXT," + // 3: tag
                "'COLOR' TEXT," + // 4: color
                "'NAME' TEXT," + // 5: name
                "'FULLNAME' TEXT," + // 6: fullname
                "'INTRODUCTION' TEXT," + // 7: introduction
                "'LINE_ID' TEXT," + // 8: line_id
                "'TOTAL_PRICE' TEXT," + // 9: total_price
                "'ADULT_TICKET' TEXT," + // 10: adult_ticket
                "'CHILD_TICKET' TEXT," + // 11: child_ticket
                "'TIME' TEXT," + // 12: time
                "'USERNAME' TEXT," + // 13: username
                "'CELLPHONE' TEXT," + // 14: cellphone
                "'EMAILADDR' TEXT," + // 15: emailaddr
                "'IDCARDFNUM' TEXT," + // 16: idcardfnum
                "'ORDER_TIME' TEXT," + // 17: order_time
                "'ORDER_NUM' TEXT," + // 18: order_num
                "'ISPAID' TEXT," + // 19: ispaid
                "'IMG' TEXT);"); // 20: img
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'TRAVEL_ORDER_INFO'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, TravelOrderInfo entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String user_id = entity.getUser_id();
        if (user_id != null) {
            stmt.bindString(2, user_id);
        }
        stmt.bindString(3, entity.getUuid());
 
        String tag = entity.getTag();
        if (tag != null) {
            stmt.bindString(4, tag);
        }
 
        String color = entity.getColor();
        if (color != null) {
            stmt.bindString(5, color);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(6, name);
        }
 
        String fullname = entity.getFullname();
        if (fullname != null) {
            stmt.bindString(7, fullname);
        }
 
        String introduction = entity.getIntroduction();
        if (introduction != null) {
            stmt.bindString(8, introduction);
        }
 
        String line_id = entity.getLine_id();
        if (line_id != null) {
            stmt.bindString(9, line_id);
        }
 
        String total_price = entity.getTotal_price();
        if (total_price != null) {
            stmt.bindString(10, total_price);
        }
 
        String adult_ticket = entity.getAdult_ticket();
        if (adult_ticket != null) {
            stmt.bindString(11, adult_ticket);
        }
 
        String child_ticket = entity.getChild_ticket();
        if (child_ticket != null) {
            stmt.bindString(12, child_ticket);
        }
 
        String time = entity.getTime();
        if (time != null) {
            stmt.bindString(13, time);
        }
 
        String username = entity.getUsername();
        if (username != null) {
            stmt.bindString(14, username);
        }
 
        String cellphone = entity.getCellphone();
        if (cellphone != null) {
            stmt.bindString(15, cellphone);
        }
 
        String emailaddr = entity.getEmailaddr();
        if (emailaddr != null) {
            stmt.bindString(16, emailaddr);
        }
 
        String idcardfnum = entity.getIdcardfnum();
        if (idcardfnum != null) {
            stmt.bindString(17, idcardfnum);
        }
 
        String order_time = entity.getOrder_time();
        if (order_time != null) {
            stmt.bindString(18, order_time);
        }
 
        String order_num = entity.getOrder_num();
        if (order_num != null) {
            stmt.bindString(19, order_num);
        }
 
        String ispaid = entity.getIspaid();
        if (ispaid != null) {
            stmt.bindString(20, ispaid);
        }
 
        String img = entity.getImg();
        if (img != null) {
            stmt.bindString(21, img);
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public TravelOrderInfo readEntity(Cursor cursor, int offset) {
        TravelOrderInfo entity = new TravelOrderInfo( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // user_id
            cursor.getString(offset + 2), // uuid
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // tag
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // color
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // name
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // fullname
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // introduction
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // line_id
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // total_price
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // adult_ticket
            cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11), // child_ticket
            cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12), // time
            cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13), // username
            cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14), // cellphone
            cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15), // emailaddr
            cursor.isNull(offset + 16) ? null : cursor.getString(offset + 16), // idcardfnum
            cursor.isNull(offset + 17) ? null : cursor.getString(offset + 17), // order_time
            cursor.isNull(offset + 18) ? null : cursor.getString(offset + 18), // order_num
            cursor.isNull(offset + 19) ? null : cursor.getString(offset + 19), // ispaid
            cursor.isNull(offset + 20) ? null : cursor.getString(offset + 20) // img
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, TravelOrderInfo entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setUser_id(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setUuid(cursor.getString(offset + 2));
        entity.setTag(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setColor(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setName(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setFullname(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setIntroduction(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setLine_id(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setTotal_price(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setAdult_ticket(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setChild_ticket(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
        entity.setTime(cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12));
        entity.setUsername(cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13));
        entity.setCellphone(cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14));
        entity.setEmailaddr(cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15));
        entity.setIdcardfnum(cursor.isNull(offset + 16) ? null : cursor.getString(offset + 16));
        entity.setOrder_time(cursor.isNull(offset + 17) ? null : cursor.getString(offset + 17));
        entity.setOrder_num(cursor.isNull(offset + 18) ? null : cursor.getString(offset + 18));
        entity.setIspaid(cursor.isNull(offset + 19) ? null : cursor.getString(offset + 19));
        entity.setImg(cursor.isNull(offset + 20) ? null : cursor.getString(offset + 20));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(TravelOrderInfo entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(TravelOrderInfo entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
