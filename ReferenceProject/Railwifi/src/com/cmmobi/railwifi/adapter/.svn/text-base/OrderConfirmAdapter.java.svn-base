package com.cmmobi.railwifi.adapter;

import java.util.ArrayList;
import java.util.Collections;
import java.util.Iterator;
import java.util.List;
import java.util.Map;

import android.content.Context;
import android.content.DialogInterface;
import android.graphics.Bitmap;
import android.graphics.Typeface;
import android.util.Log;
import android.view.LayoutInflater;
import android.view.View;
import android.view.View.OnClickListener;
import android.view.ViewGroup;
import android.widget.BaseAdapter;
import android.widget.ImageView;
import android.widget.TextView;

import com.cmmobi.railwifi.R;
import com.cmmobi.railwifi.activity.TitleRootActivity;
import com.cmmobi.railwifi.adapter.GoodAdapter.OrderGoodWrap;
import com.cmmobi.railwifi.dialog.PromptDialog;
import com.cmmobi.railwifi.network.GsonResponseObject.newsElem;
import com.cmmobi.railwifi.utils.DisplayUtil;
import com.cmmobi.railwifi.utils.ViewUtils;
import com.nostra13.universalimageloader.api.MyImageLoader;
import com.nostra13.universalimageloader.core.DisplayImageOptions;
import com.nostra13.universalimageloader.core.ImageLoader;
import com.nostra13.universalimageloader.core.assist.ImageScaleType;
import com.nostra13.universalimageloader.core.display.RoundedBitmapDisplayer;

public class OrderConfirmAdapter extends BaseAdapter implements OnClickListener {

	private Map<String,OrderGoodWrap> orderMap;
	private List<OrderGoodWrap> orderList = new ArrayList<GoodAdapter.OrderGoodWrap>();
	private LayoutInflater inflater;
	private Context context;
	MyImageLoader imageLoader = null;
	DisplayImageOptions imageLoaderOptions = null;
	private TextView tvTotalPrice;
	
	public OrderConfirmAdapter(final Context context,Map<String,OrderGoodWrap> map) {
		// TODO Auto-generated constructor stub
		this.context = context;
		inflater = LayoutInflater.from(context);
		this.orderMap = map;
		
		Collections.addAll(orderList, orderMap.values().toArray(new OrderGoodWrap[0]));
		imageLoader = MyImageLoader.getInstance();

		
		imageLoaderOptions = new DisplayImageOptions.Builder()
				.cacheInMemory(true)
				.cacheOnDisc(true)
				.imageScaleType(ImageScaleType.IN_SAMPLE_POWER_OF_2)
				.bitmapConfig(Bitmap.Config.RGB_565)
//				.displayer(new SimpleBitmapDisplayer())
				.displayer(new RoundedBitmapDisplayer(1))// 圆角图片
				.build();
	}
	
	@Override
	public int getCount() {
		// TODO Auto-generated method stub
//		Log.d("=AAA=","getCount  = " + orderList.size());
		return orderList.size();
	}

	@Override
	public Object getItem(int position) {
		// TODO Auto-generated method stub
		return null;
	}

	@Override
	public long getItemId(int position) {
		// TODO Auto-generated method stub
		return 0;
	}

	@Override
	public View getView(int position, View convertView, ViewGroup parent) {
		// TODO Auto-generated method stub
		ViewHolder holder = null;
		if (convertView == null) {
			convertView = inflater.inflate(
					R.layout.item_order_cofirm, null);
			holder = new ViewHolder();
			holder.ivDelete = (ImageView) convertView.findViewById(R.id.iv_delete);
			holder.ivAddOne = (ImageView) convertView.findViewById(R.id.iv_plus_one);
			holder.ivMinusOne = (ImageView) convertView.findViewById(R.id.iv_minus_one);
			holder.tvOrderName = (TextView) convertView.findViewById(R.id.tv_order_name);
			holder.tvOrderPrice = (TextView) convertView.findViewById(R.id.tv_order_price);
			holder.tvOrderNum = (TextView) convertView.findViewById(R.id.tv_order_num);
			holder.ivOrderImg = (ImageView) convertView.findViewById(R.id.iv_order_img);
			
			ViewUtils.setHeight(convertView.findViewById(R.id.rl_root), 147);
			ViewUtils.setMarginLeft(holder.ivDelete, 3);
			ViewUtils.setMarginLeft(convertView.findViewById(R.id.rl_order_img), 12);
			ViewUtils.setMarginTop(convertView.findViewById(R.id.rl_order_img), 12);
			ViewUtils.setSize(convertView.findViewById(R.id.rl_order_img), 169, 120);
			holder.tvOrderName.setTextSize(DisplayUtil.textGetSizeSp(context, 33));
			holder.tvOrderName.setTypeface(Typeface.MONOSPACE, Typeface.ITALIC);
			holder.tvOrderPrice.setTextSize(DisplayUtil.textGetSizeSp(context, 21));
			holder.tvOrderNum.setTextSize(DisplayUtil.textGetSizeSp(context, 21));
			ViewUtils.setMarginRight(convertView.findViewById(R.id.rl_change_num), 18);
			ViewUtils.setMarginBottom(convertView.findViewById(R.id.rl_change_num), 20);
			
			convertView.setTag(holder);
		} else {
			holder = (ViewHolder) convertView.getTag();
		}
		
		OrderGoodWrap goodWrap = orderList.get(position);
		holder.goodWrap = goodWrap;
		
		holder.tvOrderName.setText(goodWrap.goodItem.name);
		holder.tvOrderPrice.setText("单价：" + goodWrap.goodItem.price + "元/份");
		holder.tvOrderNum.setText("数量：" + goodWrap.num + "份");
		imageLoader.displayImage(goodWrap.goodItem.img_path, holder.ivOrderImg, imageLoaderOptions);
		holder.ivAddOne.setOnClickListener(this);
		holder.ivMinusOne.setOnClickListener(this);
		holder.ivDelete.setOnClickListener(this);
		holder.ivAddOne.setTag(holder);
		holder.ivMinusOne.setTag(holder);
		holder.ivDelete.setTag(holder);
		
		return convertView;
	}
	
	public void setTotalPriceTextView(TextView textView) {
		tvTotalPrice = textView;
	}
	
	public void updateTotalPrice() {
		if (tvTotalPrice != null && orderMap != null) {
			double totalPrice = 0;
			Iterator<Map.Entry<String, OrderGoodWrap>> it = orderMap.entrySet().iterator();  
			while (it.hasNext()) {  
			    Map.Entry<String, OrderGoodWrap> entry = it.next();
			    OrderGoodWrap wrap = entry.getValue();
			    totalPrice += wrap.num * Double.parseDouble(wrap.goodItem.price);
			}
			tvTotalPrice.setText("总计：" + totalPrice + "元");
		}
	}
	
	public class ViewHolder {
		ImageView ivOrderImg;
		ImageView ivDelete;
		ImageView ivAddOne;
		ImageView ivMinusOne;
		TextView tvOrderName;
		TextView tvOrderPrice;
		TextView tvOrderNum;
		OrderGoodWrap goodWrap;
	}

	@Override
	public void onClick(View v) {
		// TODO Auto-generated method stub
		final ViewHolder holder = (ViewHolder) v.getTag(); 
		final OrderGoodWrap wrap = holder.goodWrap;
		switch(v.getId()) {
		case R.id.iv_plus_one:
			GoodAdapter.addGoodNum(wrap.goodItem, orderMap);
			holder.tvOrderNum.setText("数量：" + getGoodNum(wrap.goodItem.object_id) + "份");
			break;
		case R.id.iv_minus_one:
			if (getGoodNum(wrap.goodItem.object_id) <= 1) {
				PromptDialog.Dialog(context, true, "温馨提示", "是否删除该条目","是","否", new DialogInterface.OnClickListener() {
					
					@Override
					public void onClick(DialogInterface dialog, int which) {
						// TODO Auto-generated method stub
						GoodAdapter.minusGoodNum(wrap.goodItem, orderMap);
						if (orderMap.containsKey(wrap.goodItem.object_id)) {
							holder.tvOrderNum.setText("数量：" + getGoodNum(wrap.goodItem.object_id) + "份");
						} else {
							orderList.remove(wrap);
							notifyDataSetChanged();
							updateRightButtom();
						}
						updateTotalPrice();
					}
				},null);
				break;
			}
			GoodAdapter.minusGoodNum(wrap.goodItem, orderMap);
			if (orderMap.containsKey(wrap.goodItem.object_id)) {
				holder.tvOrderNum.setText("数量：" + getGoodNum(wrap.goodItem.object_id) + "份");
			} else {
				orderList.remove(wrap);
				notifyDataSetChanged();
				updateRightButtom();
			}
			break;
		case R.id.iv_delete:
			orderMap.remove(wrap.goodItem.object_id);
			orderList.remove(wrap);
			notifyDataSetChanged();
			updateRightButtom();
			break;
		}
		updateTotalPrice();
	}
	
	private void updateRightButtom() {
		if (orderMap.size() == 0) {
			((TitleRootActivity) context).getRightButton().setEnabled(false);
		}
	}
	
	private int getGoodNum(String goodId) {
		OrderGoodWrap wrap = orderMap.get(goodId);
		if (wrap != null) {
			return wrap.num;
		}
		return 0;
	}

}
