package com.cmmobi.railwifi.adapter;

import java.text.DecimalFormat;
import java.util.Iterator;
import java.util.List;
import java.util.Map;

import android.annotation.SuppressLint;
import android.content.Context;
import android.graphics.Bitmap;
import android.graphics.Typeface;
import android.util.Log;
import android.view.LayoutInflater;
import android.view.View;
import android.view.View.OnClickListener;
import android.view.ViewGroup;
import android.widget.BaseAdapter;
import android.widget.ImageView;
import android.widget.RelativeLayout;
import android.widget.TextView;

import com.cmmobi.railwifi.R;
import com.cmmobi.railwifi.activity.TitleRootActivity;
import com.cmmobi.railwifi.network.GsonResponseObject;
import com.cmmobi.railwifi.utils.CmmobiClickAgentWrapper;
import com.cmmobi.railwifi.utils.DisplayUtil;
import com.cmmobi.railwifi.utils.ViewUtils;
import com.nostra13.universalimageloader.api.MyImageLoader;
import com.nostra13.universalimageloader.core.DisplayImageOptions;
import com.nostra13.universalimageloader.core.ImageLoader;
import com.nostra13.universalimageloader.core.assist.ImageScaleType;

public class GoodAdapter extends BaseAdapter implements OnClickListener{

	private LayoutInflater inflater;
	private Context context;
	private List<GsonResponseObject.orderElem> orderElemList;
	private Map<String,OrderGoodWrap> orderMap;
	MyImageLoader imageLoader = null;
	DisplayImageOptions imageLoaderOptions = null;
	
	private TextView tvTotalPrice;
	private final int ADDCOLOR = 0xfffd5c00;
	private final int ADDEDCOLOR = 0xffd44f00;
	DecimalFormat df1 = new DecimalFormat("0.##");
	
	public GoodAdapter(final Context context,List<GsonResponseObject.orderElem> list,Map<String,OrderGoodWrap> map) {
		// TODO Auto-generated constructor stub
		this.context = context;
		inflater = LayoutInflater.from(context);
		this.orderElemList = list;
		this.orderMap = map;
		
		imageLoader = MyImageLoader.getInstance();

		imageLoaderOptions = new DisplayImageOptions.Builder()
				.cacheInMemory(true)
				.cacheOnDisc(true)
				.imageScaleType(ImageScaleType.IN_SAMPLE_POWER_OF_2)
				.bitmapConfig(Bitmap.Config.RGB_565)
				.showImageOnFail(R.drawable.small_pic_default)
				.showImageForEmptyUri(R.drawable.small_pic_default)
				.showImageOnLoading(R.drawable.small_pic_default)
//				.displayer(new SimpleBitmapDisplayer())
				.build();
	}
	
	
	@Override
	public int getCount() {
		// TODO Auto-generated method stub
		return orderElemList.size();
	}

	@Override
	public Object getItem(int position) {
		// TODO Auto-generated method stub
		return null;
	}

	@Override
	public long getItemId(int position) {
		// TODO Auto-generated method stub
		return 0;
	}
	
	public void setTotalPriceTextView(TextView textView) {
		tvTotalPrice = textView;
	}
	
	public void updateTotalPrice() {
		if (tvTotalPrice != null && orderMap != null) {
			double totalPrice = 0;
			Iterator<Map.Entry<String, OrderGoodWrap>> it = orderMap.entrySet().iterator();  
			while (it.hasNext()) {  
			    Map.Entry<String, OrderGoodWrap> entry = it.next();
			    OrderGoodWrap wrap = entry.getValue();
			    totalPrice += wrap.num * Double.parseDouble(wrap.goodItem.price);
			}
			tvTotalPrice.setText("总计：" + df1.format(totalPrice) + "元");
		}
	}
	
	public void setData(List<GsonResponseObject.orderElem> list) {
		orderElemList = list;
	}

	@SuppressLint("ResourceAsColor")
	@Override
	public View getView(int position, View convertView, ViewGroup parent) {
		// TODO Auto-generated method stub
		ViewHolder holder = null;
		if (convertView == null) {
			convertView = inflater.inflate(
					R.layout.item_good_gridview, null);
			holder = new ViewHolder();
			
			holder.tvName = (TextView) convertView.findViewById(R.id.tv_good_name);
			holder.tvPrice = (TextView) convertView.findViewById(R.id.tv_good_price);
			holder.ivAddMore = (ImageView) convertView.findViewById(R.id.iv_add_more);
			holder.ivMinus = (ImageView) convertView.findViewById(R.id.iv_minus);
			holder.rlAdd = (RelativeLayout) convertView.findViewById(R.id.rl_add);
			holder.ivGoodImg = (ImageView) convertView.findViewById(R.id.iv_good_img);
			holder.tvIsAdded = (TextView) convertView.findViewById(R.id.tv_is_added);
			holder.tvGoodNum = (TextView) convertView.findViewById(R.id.tv_good_num);
			holder.tvName.setTypeface(Typeface.MONOSPACE, Typeface.ITALIC);
			holder.ivGoodSelectImg = (ImageView) convertView.findViewById(R.id.iv_good_img_selected);
			ViewUtils.setSize(holder.rlAdd, 318, 69);
			ViewUtils.setSize(convertView.findViewById(R.id.rl_good_bg), 318, 222);
			ViewUtils.setWidth(holder.tvName, 230);
			holder.tvGoodNum.setTextSize(DisplayUtil.textGetSizeSp(context, 36));
			holder.tvIsAdded.setTextSize(DisplayUtil.textGetSizeSp(context, 27));
			convertView.setTag(holder);
		} else {
			holder = (ViewHolder) convertView.getTag();
		}
		
		GsonResponseObject.orderElem item = orderElemList.get(position);
		holder.goodItem = item;
		holder.tvName.setText(item.name + " ");
		holder.tvPrice.setText(item.price + "元/份");
		imageLoader.displayImage(item.img_path, holder.ivGoodImg,imageLoaderOptions);
		if (orderMap.containsKey(item.object_id)) {
			OrderGoodWrap goodWrap = orderMap.get(item.object_id);
			holder.ivAddMore.setVisibility(View.VISIBLE);
			holder.ivMinus.setVisibility(View.VISIBLE);
			holder.tvIsAdded.setText("已添加");
			holder.tvIsAdded.setTextColor(ADDEDCOLOR);
			holder.tvGoodNum.setVisibility(View.VISIBLE);
			holder.tvGoodNum.setText("×" + goodWrap.num + "份");
			holder.rlAdd.setBackgroundResource(R.drawable.good_add_selected_bg);
			holder.ivGoodSelectImg.setVisibility(View.VISIBLE);
		} else {
			holder.ivAddMore.setVisibility(View.GONE);
			holder.ivMinus.setVisibility(View.GONE);
			holder.tvIsAdded.setText("添加");
			holder.tvGoodNum.setVisibility(View.GONE);
			holder.rlAdd.setBackgroundResource(R.drawable.good_add_bg);
			holder.tvIsAdded.setTextColor(ADDCOLOR);
			holder.ivGoodSelectImg.setVisibility(View.GONE);
		}
		
		holder.ivAddMore.setTag(holder);
		holder.ivMinus.setTag(holder);
		holder.rlAdd.setTag(holder);
		
		holder.ivAddMore.setOnClickListener(this);
		holder.ivMinus.setOnClickListener(this);
		holder.rlAdd.setOnClickListener(this);
		
		return convertView;
	}
	
	public class ViewHolder {
		TextView tvName;
		ImageView ivAddMore;
		ImageView ivMinus;
		RelativeLayout rlAdd;
		TextView tvPrice;
		TextView tvIsAdded;
		ImageView ivGoodImg;
		ImageView ivGoodSelectImg;
		TextView tvGoodNum;
		GsonResponseObject.orderElem goodItem;
	}
	
	public static class OrderGoodWrap {
		public int num;
		public GsonResponseObject.orderElem goodItem;
	}

	@Override
	public void onClick(View v) {
		// TODO Auto-generated method stub
		ViewHolder holder = (ViewHolder)v.getTag();
		switch(v.getId()) {
		case R.id.iv_add_more:
			addGoodNum(holder.goodItem, orderMap);
			holder.tvGoodNum.setText("×" + getGoodNum(holder.goodItem.object_id) + "份");
			break;
		case R.id.iv_minus:
			minusGoodNum(holder.goodItem, orderMap);
			minusGood(holder);
			break;
		case R.id.rl_add:
			if (!orderMap.containsKey(holder.goodItem.object_id)) {
				CmmobiClickAgentWrapper.onEvent(context, "t_food","1");
				addGoodNum(holder.goodItem,orderMap);
				addGood(holder);
			} else {
				CmmobiClickAgentWrapper.onEvent(context, "t_food","2");
				orderMap.remove(holder.goodItem.object_id);
				minusGood(holder);
			}
			break;
		}
//		notifyDataSetChanged();
		updateTotalPrice();
	}
	
	private void addGood(ViewHolder holder) {
		holder.ivAddMore.setVisibility(View.VISIBLE);
		holder.ivMinus.setVisibility(View.VISIBLE);
		holder.tvIsAdded.setText("已添加");
		holder.tvGoodNum.setVisibility(View.VISIBLE);
		holder.tvGoodNum.setText("×1"  + "份");
		holder.rlAdd.setBackgroundResource(R.drawable.good_add_selected_bg);
		holder.tvIsAdded.setTextColor(ADDEDCOLOR);
		holder.ivGoodSelectImg.setVisibility(View.VISIBLE);
		
		((TitleRootActivity) context).getRightButton().setEnabled(true);
	}
	
	private int getGoodNum(String goodId) {
		OrderGoodWrap wrap = orderMap.get(goodId);
		if (wrap != null) {
			return wrap.num;
		}
		return 0;
	}
	
	private void minusGood(ViewHolder holder) {
		GsonResponseObject.orderElem elem = holder.goodItem;
		if (elem != null) {
			if (orderMap.containsKey(elem.object_id)) {
				holder.tvGoodNum.setText("×" + getGoodNum(holder.goodItem.object_id) + "份");
			} else {
				holder.ivAddMore.setVisibility(View.GONE);
				holder.ivMinus.setVisibility(View.GONE);
				holder.tvIsAdded.setText("添加");
				holder.tvGoodNum.setVisibility(View.GONE);
				holder.rlAdd.setBackgroundResource(R.drawable.good_add_bg);
				holder.tvIsAdded.setTextColor(ADDCOLOR);
				holder.ivGoodSelectImg.setVisibility(View.GONE);
			}
			if (orderMap.size() == 0) {
				((TitleRootActivity) context).getRightButton().setEnabled(false);
			}
		}
	}
	
	public static void addGoodNum(GsonResponseObject.orderElem item,Map<String,OrderGoodWrap> goodMap) {
		if (item == null || goodMap == null) {
			Log.d("addGoodNum","item = " + item + " map = " + goodMap);
			return;
		}
		String goodId = item.object_id;
		if (goodMap.containsKey(goodId)) {
			OrderGoodWrap wrap = goodMap.get(goodId);
			wrap.num++;
			goodMap.put(goodId, wrap);
		} else {
			OrderGoodWrap wrap = new GoodAdapter.OrderGoodWrap();
			wrap.num = 1;
			wrap.goodItem = item;
			goodMap.put(goodId, wrap);
		}
	}
	
	public static void minusGoodNum(GsonResponseObject.orderElem item,Map<String,OrderGoodWrap> goodMap) {
		if (item == null || goodMap == null) {
			Log.d("addGoodNum","item = " + item + " map = " + goodMap);
			return;
		}
		String goodId = item.object_id;
		if (goodMap.containsKey(goodId)) {
			OrderGoodWrap wrap = goodMap.get(goodId);
			if (wrap.num > 1) {
				wrap.num--;
				goodMap.put(goodId, wrap);
			} else {
				goodMap.remove(goodId);
			}
		}
	}
	
	public Map<String,OrderGoodWrap> getOrderMap() {
		return orderMap;
	}

}
