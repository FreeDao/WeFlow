package com.cmmobi.railwifi.activity;

import java.util.ArrayList;
import java.util.List;

import android.app.Activity;
import android.content.Context;
import android.content.Intent;
import android.content.SharedPreferences;
import android.graphics.Bitmap;
import android.graphics.Color;
import android.graphics.drawable.ColorDrawable;
import android.os.Bundle;
import android.os.Message;
import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.BaseAdapter;
import android.widget.GridView;
import android.widget.ImageView;
import android.widget.RelativeLayout;
import android.widget.TextView;

import com.cmmobi.railwifi.R;
import com.cmmobi.railwifi.utils.DisplayUtil;
import com.cmmobi.railwifi.utils.ModuleUtils;
import com.cmmobi.railwifi.utils.ModuleUtils.TagWrapper;
import com.cmmobi.railwifi.utils.ViewUtils;
import com.google.gson.Gson;
import com.nostra13.universalimageloader.api.MyImageLoader;
import com.nostra13.universalimageloader.core.DisplayImageOptions;
import com.nostra13.universalimageloader.core.assist.ImageScaleType;

public class ModuleAddActivity extends TitleRootActivity {

	private GridView moduleGrid;
	private ModuleAddAdapter adapter;
	ArrayList<TagAddWrapper> tagList;
	@Override
	public boolean handleMessage(Message msg) {
		// TODO Auto-generated method stub
		return false;
	}

	@Override
	public int subContentViewId() {
		// TODO Auto-generated method stub
		return R.layout.activity_module_add;
	}
	
	@Override
	protected void onCreate(Bundle savedInstanceState) {
		// TODO Auto-generated method stub
		super.onCreate(savedInstanceState);
		
		initViews();
	}
	
	private void initViews() {
		setRightButtonText("完成>>");
		setTitleText("添加");
		
		moduleGrid = (GridView) findViewById(R.id.gv_modules);
		tagList = new ArrayList<ModuleAddActivity.TagAddWrapper>();
		
		ArrayList<Integer> selectedList = getIntent().getIntegerArrayListExtra("modules");
		
		if (selectedList != null) {
			for (Integer id:selectedList) {
				TagAddWrapper addWrapper = new TagAddWrapper();
				addWrapper.isAdded = true;
				addWrapper.wrapper = ModuleUtils.findModules(id);
			}
		}
		for (TagWrapper wrapper:ModuleUtils.tagLists) {
			if (!selectedList.contains(wrapper.tagId)) {
				TagAddWrapper addWrapper = new TagAddWrapper();
				addWrapper.wrapper = wrapper;
				addWrapper.isAdded = false;
				tagList.add(addWrapper);
			}
		}
		adapter = new ModuleAddAdapter(this, tagList);
		moduleGrid.setAdapter(adapter);
		moduleGrid.setSelector(new ColorDrawable(Color.TRANSPARENT));
		
	}
	
	class ModuleAddHolder {
		public ImageView ivTagImg;
		public TextView tvTagText;
		public RelativeLayout rlRoot;
		public ImageView ivSelected;
	}
	
	class ModuleAddAdapter extends BaseAdapter {

		private LayoutInflater inflater;
		private Context context;
		MyImageLoader imageLoader = null;
		DisplayImageOptions imageLoaderOptions = null;
		private ArrayList<TagAddWrapper> tagLists = new ArrayList<TagAddWrapper>();
		
		public ModuleAddAdapter(Context context,ArrayList<TagAddWrapper> list) {
			this.context = context;
			inflater = LayoutInflater.from(context);
			
			imageLoader = MyImageLoader.getInstance();

			imageLoaderOptions = new DisplayImageOptions.Builder()
					.cacheInMemory(true)
					.cacheOnDisc(true)
					.imageScaleType(ImageScaleType.IN_SAMPLE_POWER_OF_2)
				    .bitmapConfig(Bitmap.Config.RGB_565)
					.showImageForEmptyUri(R.drawable.pic_index_default)
					.showImageOnFail(R.drawable.pic_index_default)
					.showImageOnLoading(R.drawable.pic_index_default)
					.build();
			if (list != null) {
				tagLists = list;
			}
		}
		@Override
		public int getCount() {
			// TODO Auto-generated method stub
			return tagLists.size();
		}

		@Override
		public TagAddWrapper getItem(int position) {
			// TODO Auto-generated method stub
			return tagLists.get(position);
		}

		@Override
		public long getItemId(int position) {
			// TODO Auto-generated method stub
			return position;
		}

		@Override
		public View getView(int position, View convertView, ViewGroup parent) {
			// TODO Auto-generated method stub
			ModuleAddHolder holder = null;
			if (convertView == null) {
				convertView = inflater.inflate(R.layout.item_homepage_tag, null);
				holder = new ModuleAddHolder();
				holder.ivTagImg = (ImageView) convertView.findViewById(R.id.iv_tag_img);
				holder.tvTagText = (TextView) convertView.findViewById(R.id.tv_tag_text);
				holder.rlRoot = (RelativeLayout) convertView.findViewById(R.id.rl_tag_root);
				holder.ivSelected = (ImageView) convertView.findViewById(R.id.iv_tag_selected);
				convertView.setTag(holder);
				
				ViewUtils.setHeight(holder.ivTagImg, 116);
				ViewUtils.setHeight(holder.rlRoot, 162);
				holder.tvTagText.setTextSize(DisplayUtil.textGetSizeSp(context, 30));
				ViewUtils.setMarginBottom(holder.tvTagText, 8);
			} else {
				holder = (ModuleAddHolder) convertView.getTag();
			}
			TagAddWrapper tagWrapper = tagLists.get(position);
			
			if (tagWrapper.isAdded) {
				holder.rlRoot.setBackgroundResource(R.drawable.bg_module_add);
				holder.ivSelected.setVisibility(View.VISIBLE);
			} else {
				holder.rlRoot.setBackgroundResource(R.drawable.bg_item_tag);
				holder.ivSelected.setVisibility(View.GONE);
			}
			
			holder.rlRoot.setTag(tagWrapper);
			holder.rlRoot.setOnClickListener(ModuleAddActivity.this);
			holder.tvTagText.setText(tagWrapper.wrapper.tagDesc);
//			imageLoader.displayImage("", holder.ivTagImg, imageLoaderOptions);
			holder.ivTagImg.setImageResource(tagWrapper.wrapper.drawableRes);
			
			
			return convertView;
		}
	}
	
	class TagAddWrapper {
		public TagWrapper wrapper;
		public boolean isAdded;
		
		@Override
		public boolean equals(Object o) {
			// TODO Auto-generated method stub
			return wrapper.tagId == ((TagAddWrapper) o).wrapper.tagId;
		}
	}
	
	class ContentHolder {
		public ImageView ivContentImg;
		public TextView tvContent;
		public RelativeLayout rlRoot;
		public ImageView ivSelected;
	}
	
	@Override
	public void onClick(View v) {
		// TODO Auto-generated method stub
		switch(v.getId()) {
		case R.id.rl_tag_root:
			TagAddWrapper tagWrapper = (TagAddWrapper) v.getTag();
			tagWrapper.isAdded = !tagWrapper.isAdded;
			swapList(tagWrapper);
			adapter.notifyDataSetChanged();
			break;
		case R.id.btn_title_right:
			Intent mIntent = new Intent();
			ArrayList<Integer> selectedModules = getSelectedModule();
			mIntent.putIntegerArrayListExtra("selectedmodule", selectedModules);
			SharedPreferences mySharedPreferences= getSharedPreferences("selected_modules", 
					Activity.MODE_PRIVATE); 
			SharedPreferences.Editor editor = mySharedPreferences.edit();
			String contentStr = new Gson().toJson(selectedModules);
			editor.putString("modules", contentStr);
			editor.commit();
			setResult(RESULT_OK,mIntent);
			finish();
			break;
		}
		super.onClick(v);
	}
	
	private void swapList(TagAddWrapper tagWrapper) {
		tagList.remove(tagWrapper);
		int size = tagList.size();
		int i;
		for (i = 0;i < size;i++) {
			TagAddWrapper addWrapper = tagList.get(i);
			if (addWrapper.isAdded == false) {
				tagList.add(i,tagWrapper);
				return;
			}
		}
		tagList.add(i,tagWrapper);
	}
	
	private ArrayList<Integer> getSelectedModule() {
		ArrayList<Integer> moduleList = new ArrayList<Integer>();
		for (TagAddWrapper addWrapper:tagList) {
			if (addWrapper.isAdded) {
				moduleList.add(addWrapper.wrapper.tagId);
			}
		}
		return moduleList;
	}

}
