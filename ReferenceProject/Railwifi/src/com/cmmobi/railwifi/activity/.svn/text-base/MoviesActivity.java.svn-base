package com.cmmobi.railwifi.activity;

import java.util.ArrayList;
import java.util.List;

import android.content.Intent;
import android.content.pm.PackageInfo;
import android.content.pm.PackageManager;
import android.content.pm.PackageManager.NameNotFoundException;
import android.os.Bundle;
import android.os.Message;
import android.view.View;
import android.view.View.OnClickListener;
import android.widget.AdapterView;
import android.widget.RelativeLayout;
import android.widget.Toast;
import android.widget.AdapterView.OnItemClickListener;
import android.widget.AdapterView.OnItemLongClickListener;
import android.widget.ListView;

import com.cmmobi.railwifi.Config;
import com.cmmobi.railwifi.R;
import com.cmmobi.railwifi.adapter.MoviesListAdapter;
import com.cmmobi.railwifi.dao.PlayHistory;
import com.cmmobi.railwifi.dialog.PromptDialog;
import com.cmmobi.railwifi.network.GsonResponseObject;
import com.cmmobi.railwifi.network.GsonResponseObject.mediaElem;
import com.cmmobi.railwifi.network.Requester;
import com.cmmobi.railwifi.sql.HistoryManager;
import com.cmmobi.railwifi.sql.SqlConvertor;
import com.cmmobi.railwifi.utils.CmmobiClickAgentWrapper;
import com.cmmobi.railwifi.utils.ConStant;
import com.cmmobi.railwifi.utils.DownloadApkUtils;
import com.google.gson.Gson;
import com.handmark.pulltorefresh.library.PullToRefreshBase;
import com.handmark.pulltorefresh.library.PullToRefreshBase.OnRefreshListener2;
import com.handmark.pulltorefresh.library.PullToRefreshListView;

/**
 * @author youtian
 * @email youtian@cmmobi.com
 * @date  2014-11-12
 */
public class MoviesActivity extends TitleRootActivity implements OnRefreshListener2<ListView>{


	private static final int RG_REQUEST = 0;
	private static final int HANDLER_FLAG_LIST_NO_DATA = 0x17386198;
	private RelativeLayout rlNoNet;
	private PullToRefreshListView xlv_moviesData;
	private ListView lv_moviesData;
	private MoviesListAdapter moviesListAdapter;
	private ArrayList<GsonResponseObject.mediaElem> listItems;
	private ArrayList<GsonResponseObject.mediaElem> backUpListItems = new ArrayList<GsonResponseObject.mediaElem>();
	private boolean isHasNextPage = false;
	private boolean backisHasNextPage = false;
	private int pageNo;
	private int backUpPageNo;
	private String tagType = null;
	private String tagName = null;

//	private GsonResponseObject.sohuMovieResp curSohuDetail;
	private int pendingThirdSourceType = 0; //0 init, 1 click source, 2 click play
	private Gson gson = new Gson();
	private mediaElem curMediaItem;
	
	@Override
	public int subContentViewId() {
		return R.layout.activity_media_movies;
	}
	
	@Override
	protected void onCreate(Bundle savedInstanceState) {
		// TODO Auto-generated method stub
		super.onCreate(savedInstanceState);
		setTitleText("看电影");
		rightButton.setBackgroundResource(R.drawable.btn_tag);
		
		rlNoNet = (RelativeLayout) findViewById(R.id.rl_no_network);
		xlv_moviesData = (PullToRefreshListView) findViewById(R.id.xlv_movies_data);
		xlv_moviesData.setPullLabel("加载更多");
		xlv_moviesData.setReleaseLabel("松开加载更多");
		xlv_moviesData.setShowIndicator(false);
		lv_moviesData = xlv_moviesData.getRefreshableView();
		xlv_moviesData.setOnRefreshListener(this);
		
		moviesListAdapter = new MoviesListAdapter(this);
		listItems = new ArrayList<GsonResponseObject.mediaElem>();
		moviesListAdapter.setData(listItems);
		pageNo = 1;
		tagType = null;
		Requester.requestMovieList(handler, pageNo, tagType);
		
//		moviesListAdapter.setData(listItems);
		
		lv_moviesData.setAdapter(moviesListAdapter);
		
		
		lv_moviesData.setOnItemLongClickListener(new OnItemLongClickListener() {

			@Override
			public boolean onItemLongClick(AdapterView<?> arg0, View arg1,
					int arg2, long arg3) {
				// TODO Auto-generated method stub
								
				return false;
			}
		});
		
		rightButton.setOnClickListener(this);
		
	}
	
	
	@Override
	public void onResume() {
		// TODO Auto-generated method stub
		super.onResume();
		moviesListAdapter.notifyDataSetChanged();
	}
	
	@Override
	public void onStop() {
		// TODO Auto-generated method stub
		super.onStop();
	}

	
	
	@Override
	public void onPullDownToRefresh(PullToRefreshBase<ListView> refreshView) {
		// TODO Auto-generated method stub
		refreshView.onRefreshComplete();
	}

	@Override
	public void onPullUpToRefresh(PullToRefreshBase<ListView> refreshView) {
		// TODO Auto-generated method stub
		
		if(isHasNextPage){
			Requester.requestMovieList(handler, ++pageNo, tagType);
		}else{
			handler.sendEmptyMessage(HANDLER_FLAG_LIST_NO_DATA);
		}
	}

	@Override
	public void onClick(View v) {
		// TODO Auto-generated method stub
		switch(v.getId()){
		case R.id.btn_title_right:
			backisHasNextPage = isHasNextPage;
			backUpPageNo = pageNo;
			CmmobiClickAgentWrapper.onEvent(this, "av_movie_tag");
			Intent tagIntent = new Intent(this, TagActivity.class);
			tagIntent.putExtra(TagActivity.KEY_TYPE, GsonResponseObject.MEDIA_TYPE_MOVIE);
			startActivityForResult(tagIntent, RG_REQUEST);
			break;
		case R.id.btn_title_left:
			onBackPressed();
			break;
		case R.id.btn_play:
		{
			String media_id = (String) v.getTag(R.string.key_media_id);
			String source_id = (String) v.getTag(R.string.key_source_id);
			String source_name = (String) v.getTag(R.string.key_source_name);
			GsonResponseObject.mediaElem mediaItem = (GsonResponseObject.mediaElem) v.getTag(R.string.key_media_object);
			curMediaItem = mediaItem;
			CmmobiClickAgentWrapper.onEvent(this, "av_movie_play", "label", media_id, "label2", source_id);
			if(ConStant.SOHU_SOURCE_NAME.equalsIgnoreCase(source_name)){
				try {
					PackageManager pm = getPackageManager();
					PackageInfo pi = pm.getPackageInfo("com.sohu.sohuvideo", PackageManager.GET_ACTIVITIES);
//					pendingThirdSourceType = 2;
//					Requester.requestSohuMovie(handler, media_id);
					
					Intent intent = new Intent(this, MovieDetailActivity.class);
					intent.putExtra(ConStant.INTENT_MEDIA_ID, media_id);
					intent.putExtra(ConStant.INTENT_SOURCE_ID, source_id);
					startActivity(intent);
					
				} catch (NameNotFoundException e) {
					DownloadApkUtils downApk = new DownloadApkUtils(this, source_id);
					downApk.download();
				}
			}else{
				PlayHistory ph = HistoryManager.getInstance().getPlayHistoryItem(media_id);
				if(ph==null){
					ph = SqlConvertor.mediaItem2PlayHistory(mediaItem, GsonResponseObject.MEDIA_TYPE_MOVIE, null, 0);
				}
				if(Config.IS_USE_COMMOBI_VIDEOVIEW){
					Intent intent = new Intent(this, CmmobiVideoPlayer.class);
					intent.putExtra(VideoPlayerActivity.KEY_PLAYHISTORY, gson .toJson(ph));
					intent.putExtra(VideoPlayerActivity.KEY_MOVIE_TYPE, "1");
					startActivity(intent);
				}else{
					Intent intent = new Intent(this, VideoPlayerActivity.class);
					intent.putExtra(VideoPlayerActivity.KEY_PLAYHISTORY, gson.toJson(ph));
					intent.putExtra(VideoPlayerActivity.KEY_MOVIE_TYPE, "1");
					startActivity(intent);
				}
			}

		}
		break;
		case R.id.tv_source_name:
		{
			String media_id = (String) v.getTag(R.string.key_media_id);
			String source_id = (String) v.getTag(R.string.key_source_id);
			String source_name = (String) v.getTag(R.string.key_source_name);
			CmmobiClickAgentWrapper.onEvent(this, "av_movie_source", "label", media_id, "label2", source_id);
			if(source_id!=null && !source_id.equals("")){
				
				if(ConStant.SOHU_SOURCE_NAME.equalsIgnoreCase(source_name)){
					try {
						PackageManager pm = getPackageManager();
						PackageInfo pi = pm.getPackageInfo("com.sohu.sohuvideo", PackageManager.GET_ACTIVITIES);
					} catch (NameNotFoundException e) {
						DownloadApkUtils downApk = new DownloadApkUtils(this, source_id);
						downApk.download();
					}
				}else{
					DownloadApkUtils downApk = new DownloadApkUtils(this, source_id);
					downApk.download();
				}
				
			}
			
		}
		break;
			
		default:
		}
	}	
	
	
	@Override
	public void onDestroy() {
		// TODO Auto-generated method stub
		super.onDestroy();
	}

	@Override
	public boolean handleMessage(Message msg) {
		// TODO Auto-generated method stub
		switch(msg.what){
		case Requester.RESPONSE_TYPE_SOHU_MOVIE:
			GsonResponseObject.sohuMovieResp r46 = (GsonResponseObject.sohuMovieResp) msg.obj;
			if(r46!=null && "0".equals(r46.status)){
				Intent intent = new Intent(this, MovieDetailActivity.class);
				intent.putExtra(ConStant.INTENT_MEDIA_ID, curMediaItem.media_id);
				intent.putExtra(ConStant.INTENT_SOURCE_ID, curMediaItem.source_id);
				startActivity(intent);
				
				
//				if(pendingThirdSourceType==1){
//					
//				}else if(pendingThirdSourceType==2){
//					PlayHistory ph = HistoryManager.getInstance().getPlayHistoryItem(curMediaItem.media_id);
//					if(ph==null){
//						ph = SqlConvertor.sohuMedia2PlayHistory(curMediaItem, r46.videopath, GsonResponseObject.MEDIA_TYPE_MOVIE, null, 0);
//					}
////					Intent intent = new Intent(this, SohuPlayerActivity.class);
////					intent.putExtra(VideoPlayerActivity.KEY_PLAYHISTORY, gson.toJson(ph));
////					intent.putExtra(VideoPlayerActivity.KEY_MOVIE_TYPE, "1");
////					this.startActivity(intent);
//					try {
//						PackageManager pm = getPackageManager();
//						pm.getPackageInfo("com.sohu.sohuvideo", PackageManager.GET_ACTIVITIES);
//						MovieDetailActivity.startSohuClient(this, r46, curMediaItem.name, curMediaItem.introduction);
//					} catch (NameNotFoundException e) {
//						
//					}
//				}

			}
			break;
//		case Requester.RESPONSE_TYPE_MEDIA_MOVIEINFO:
//			GsonResponseObject.mediaDetailInfoResp r12 = (GsonResponseObject.mediaDetailInfoResp) msg.obj;
//			if(r12!=null && "0".equals(r12.status)){
//				updateView(r12);
//				curMediaDetail = r12;
//				rlNoNet.setVisibility(View.GONE);
//				if(r12.source_id!=null && !r12.source_id.equals("")){
//					source_id = r12.source_id;
//					source_name = r12.source;
//					if(source_name!=null && source_name.equalsIgnoreCase(ConStant.SOHU_SOURCE_NAME) && r12.media_id!=null){
//						Requester.requestSohuMovie(handler, r12.media_id);
//					}
//				}
//			}else{
//				rlNoNet.setVisibility(View.VISIBLE);
//			}
//			break;
		case HANDLER_FLAG_LIST_NO_DATA:
			xlv_moviesData.onRefreshComplete();
			break;
		case Requester.RESPONSE_TYPE_MEDIA_MOVIELIST:
			GsonResponseObject.mediaListResp r11 = (GsonResponseObject.mediaListResp) msg.obj;
			if(r11!=null && r11.status!=null && r11.status.equals("0")){
				List<GsonResponseObject.mediaElem> data_r11 = new ArrayList<GsonResponseObject.mediaElem>();
				if(r11.list!=null && r11.list.length>0){
					for(int i=0; i<r11.list.length; i++){
						if(ConStant.SOHU_SOURCE_NAME.equals(r11.list[i].source)){
							if(!Config.IS_USE_SOHU_MOVIE){
								continue;
							}
						}
						data_r11.add(r11.list[i]);
//						if(listItems!=null && listItems.size()>0){
//							for(mediaElem elem : listItems){
//								if(elem.media_id.equals(r11.list[i])){
//									Toast.makeText(this, "same media_id:" + elem.name, Toast.LENGTH_LONG).show();
//								}
//							}
//						}
						listItems.add(r11.list[i]);
					}
					
					moviesListAdapter.notifyDataSetChanged();
					
					isHasNextPage = "1".equals(r11.isNextPage);
					if (tagType == null) {
						backUpListItems.addAll(data_r11);
						backUpPageNo = pageNo;
					}
					rlNoNet.setVisibility(View.GONE);
				}

//				listItems.addAll(data_r11);


			}else{
				if(listItems!=null && listItems.size()>0){
					PromptDialog.Dialog(this, "温馨提示", "网络异常", "确定");
				}else{
					rlNoNet.setVisibility(View.VISIBLE);
				}
				
			}
			
			xlv_moviesData.onRefreshComplete();
			break;
		}
		return false;
	}
	
	@Override
	public void onActivityResult(int requestCode, int resultCode, Intent data) {
		if (requestCode == RG_REQUEST) {
			if (resultCode == RESULT_OK) {
				if (data != null) {
					pageNo = 1;
					isHasNextPage = true;
					listItems.clear();
					tagType = data.getStringExtra(TagActivity.KEY_TAG_ID);
					tagName = data.getStringExtra(TagActivity.KEY_TAG_NAME);
					Requester.requestMovieList(handler, pageNo, tagType);
					setTitleText(tagName);
					moviesListAdapter.notifyDataSetChanged();
				}

			}
		}
		super.onActivityResult(requestCode, resultCode, data);
	}
	
	@Override
	public void onBackPressed() {
		// TODO Auto-generated method stub
		if (tagType == null) {
			super.onBackPressed();
		} else {
			listItems.clear();
			listItems.addAll(backUpListItems);
			isHasNextPage = backisHasNextPage;
			pageNo = backUpPageNo;
			moviesListAdapter.notifyDataSetChanged();
			tagType = null;
			tagName = null;
			setTitleText("看电影");
		}
	}

}
