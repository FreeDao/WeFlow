import org.apache.tools.ant.filters.ReplaceTokens

project.ext {
  etocproject = [:]
  etocproject.root = project(':').projectDir.parentFile.parentFile.parentFile
  etocproject.conf = new File(etocproject.root, 'conf')
  etocproject.lib = new File(etocproject.root, 'lib')

  version = '1.0-SNAPSHOT'
  asmCommonsVersion = '3.3.1'
  bcprovVersion = '1.46'
  c3p0Version = '0.9.2.1'
  cglibVersion = '2.2.2'
  commonsCodecVersion = '1.8'
  commonsDiscoveryVersion = '0.4'
  commonsFileuploadVersion = '1.3.1'
  commonsHttpclientVersion = '3.1'
  commonsLangVersion = '2.6'
  dom4jVersion = '1.6.1'
  findbugsVersion = '2.0.1'
  groovyVersion = '2.2.1'
  guavaVersion = '17.0'
  hibernateValidatorVersion = '5.1.2.Final'
  hibernateVersion = '4.3.5.Final'
  htmlparserVersion = '2.1'
  jacksonVersion = '2.3.3'
  jdomVersion = '1.1.3'
  jsonVersion = '20090211'
  jstlVersion = '1.2'
  junitVersion = '4.11'
  log4jVersion = '1.2.17'
  servletVersion = '2.5'
  shiroVersion = '1.2.3'
  slf4jVersion = '1.7.6'
  springDataJpaVersion = '1.7.2.RELEASE'
  springVersion = '3.2.8.RELEASE'
  standardTaglibsVersion = '1.1.2'
}

subprojects {
  apply plugin: 'java'
  apply plugin: 'eclipse'
  apply plugin: 'sonar-runner'
  apply plugin: 'war'
  
  sonarRunner {
    sonarProperties {
      property "sonar.sourceEncoding", "UTF-8"
      property "sonar.host.url", "http://localhost:9000"
      property "sonar.jdbc.url", "jdbc:h2:tcp://localhost:9092/sonar"
      property "sonar.jdbc.driverClassName", "org.h2.Driver"
      property "sonar.username", "sonar"
      property "sonar.password", "sonar"
    }
  }

  configurations {
    jdbc
    h2
    mysql
    oracle
    db2
    sql_server
  }

  project.ext {
    application = [
      properties: new Properties()
    ]

    def appConf = new File(project(':mgt').projectDir, 'src/main/resources/application.properties')
    if ( appConf.exists() ) {
      appConf.withInputStream { stream -> application.properties.load(stream) }
    }
  }

  eclipse {
    classpath {
      defaultOutputDir = file("build/eclipse")
    }
  }

  sourceSets {
    main {
      java {
        srcDir 'src/main/java'
      }
      resources {
        srcDir 'src/main/resources'
      }
    }
  }

  [compileJava, compileTestJava]*.options.collect { options -> 
    options.encoding = 'UTF-8'
  }

  dependencies {
    def lib = etocproject.lib
    
    h2 "com.h2database:h2:1.3.171"
    mysql "mysql:mysql-connector-java:5.1.24"
    oracle files(new File(lib, 'oracle/ojdbc6.jar'))
    db2 files(new File(lib, 'db2/db2jcc.jar'))
    sql_server files(new File(lib, 'sql_server/sqljdbc4.jar'))

    def database = project.application.properties['jdbc.database'] ?: 'MYSQL'
    if (database) {
      jdbc configurations[database.toLowerCase()]
    }
    
    def provider = project.application.properties['pay.provider']
    if (provider) {
      compile fileTree(new File(lib, provider))
    }
  }

  repositories {
    maven {
      url(new File(etocproject.lib, 'repository').toURI().toURL())
    }
    maven {
      //url "http://localhost:8081/nexus/content/groups/public/"
	  url "http://192.168.1.146:8081/nexus/content/groups/public/"
    }
    mavenCentral name:'codehaus', artifactUrls: ["http://repository.codehaus.org/"]
    mavenCentral name:'ibiblio', artifactUrls: ["http://mirrors.ibiblio.org/pub/mirrors/maven2/"]
    mavenCentral name:'apache', artifactUrls: ["http://people.apache.org/repo/m2-ibiblio-rsync-repository/"]
    mavenCentral name:'maven', artifactUrls: ["http://repo2.maven.org/maven2/"]
    mavenCentral name:'restlet', artifactUrls: ["http://maven.restlet.org/"]
    mavenCentral name:'lds', artifactUrls: ["https://code.lds.org/nexus/content/repositories/thirdparty/"]
    mavenCentral name:'m2m', artifactUrls: ["http://repository.m2m.io:8081/nexus/content/groups/public/"]
  }
}
